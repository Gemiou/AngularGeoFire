{"name":"AngularGeoFire","tagline":"Angular service wrapping the GeoFire geospatial lib for Firebase","body":"AngularGeoFire\r\n==============\r\n\r\nAngular service wrapping the [GeoFire](https://www.firebase.com/blog/2013-09-25-location-queries-geofire.html) geospatial lib for [Firebase](https://www.firebase.com/).\r\n\r\n[![Build Status](https://travis-ci.org/mikepugh/AngularGeoFire.svg?branch=v2)](https://travis-ci.org/mikepugh/AngularGeoFire) [![Coverage Status](https://coveralls.io/repos/mikepugh/AngularGeoFire/badge.png)](https://coveralls.io/r/mikepugh/AngularGeoFire) [![Bower version](https://badge.fury.io/bo/angularGeoFire.svg)](http://badge.fury.io/bo/angularGeoFire)\r\n\r\nUsage\r\n-----\r\n````\r\nbower install angularGeoFire\r\n````\r\n\r\nIn your app, include the Firebase and GeoFire libraries (technically AngularGeoFire doesn't depend on AngularFire but you'll probably want to use it).\r\n\r\n````\r\n<script src=\"//cdn.firebase.com/js/client/1.0.17/firebase.js\"></script>\r\n<script src=\"bower_components/rsvp/rsvp.min.js\"></script>\r\n<script src=\"bower_components/angularfire/angularfire.js\"></script>\r\n<script src=\"bower_components/geofire/dist/geofire.min.js\"></script>\r\n<script src=\"bower_components/AngularGeoFire/dist/angularGeoFire.js\"></script>\r\n````\r\n\r\nInclude angularGeoFire.min.js and then include it in your app dependency. The API matches that of geoFire @ https://github.com/firebase/geoFire, just prefix the method calls with a $ (ex: $geoFire.$set). AngularGeoFire translates GeoFire's RSVP promises into Angular $q service promises. The GeoFire \"on\" events are translated into Angular broadcasts to be consumed anywhere in your app.\r\n\r\n\r\n````javascript\r\nangular.module('yourApp', ['angularGeoFire']);\r\n````\r\n\r\nThen you can reference the dependency in your services or controllers\r\n\r\n````javascript\r\n\r\nangular.module('yourApp')\r\n  .controller('SomeCtrl', function($scope, $geofire, $log) {\r\n    $scope.searchResults = [];\r\n\r\n    var $geo = $geofire(new Firebase('https://<<your-firebase>>.firebaseio.com/'));\r\n\r\n    // Trivial example of inserting some data and querying data\r\n    $geo.$set(\"some_key\", [37.771393,-122.447104])\r\n        .catch(function(err) {\r\n            $log.error(err);\r\n        });\r\n\r\n    // Get some_key's location, place it on $scope\r\n    $geo.$get(\"some_key\")\r\n        .then(function (location) {\r\n            $scope.objLocation = location;\r\n        });\r\n\r\n    // Remove \"some_key\" location from forge\r\n    $geo.$remove(\"some_key\")\r\n        .catch(function (err) {\r\n            $log.error(err);\r\n        });\r\n\r\n\r\n    // Setup a GeoQuery\r\n    var query = $geo.$query({\r\n        center: [37.77, -122.447],\r\n        radius: 20\r\n    });\r\n\r\n    // Setup Angular Broadcast event for when an object enters our query\r\n    var geoQueryCallback = query.on(\"key_entered\", \"SEARCH:KEY_ENTERED\");\r\n\r\n    // Listen for Angular Broadcast\r\n    $rootScope.$on(\"SEARCH:KEY_ENTERED\", function (event, key, location, distance) {\r\n        // Do something interesting with object\r\n        $scope.searchResults.push({key: key, location: location, distance: distance});\r\n\r\n        // Cancel the query if the distance is > 5 km\r\n        if(distance > 5) {\r\n            geoQueryCallback.cancel();\r\n        }\r\n    });\r\n\r\n    // See geofire documentation for other on(\"..\") events available\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  });\r\n\r\n````\r\n\r\nContribute\r\n----------\r\n[![Hack mikepugh/angularGeoFire on Nitrous.IO](https://d3o0mnbgv6k92a.cloudfront.net/assets/hack-l-v1-3cc067e71372f6045e1949af9d96095b.png)](https://www.nitrous.io/hack_button?source=embed&runtime=nodejs&repo=mikepugh%2FangularGeoFire)\r\n\r\nLicense\r\n-------\r\nMIT\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}